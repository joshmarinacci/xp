# Rect is built in
# SCREEN is a rect already

# the rules
# { } defines a block, which is a sequence of expressions
# { } a block returns the value of the last expression
# { } is optional if the block only has a single expression
# => passes the result of the previous expression as the first argument of the next expression
# map takes a list and a lambda
# lambda is defined with (args) block or (args) expression
# a lambda with no arguments may omit the parens
range(20) => map (i) { randf(0.2,0.5*i) } => hues
or
range(20) => map randf(0.2,0.5) => hues

# the are integer numbers, real numbers, boolean values, lists, and objects which have key:value pairs
# all other data types are customizations of objects

custom objects can have complex getters and setters

ex:

type Rect {
    x:0
    y:0
    xy <= [self.x, self.y]
    w:0
    h:0
    size <= [self.w, self.h]
    wc <= (self.x + self.w)/2  # Width Center
    hc <= (self.y + self.h)/2  # Height Center
    left: _.x
    right: <= (_.x + _.w)
    top: _.y
    bottom: <= (_.y + _.h)
    center <= [_.wcenter, _.hcenter]
    split: @(sw,sh) {
        # the code to do the actual splitting
        # returns four new rects
    }
}

BLACK <= Color(0,0,0)
RED   <= Color(red:1.0) # green and blue default to zero
BLUE  <= Color(iRed:0, iBlue:255, iGreen:0) # the i versions use 0->255, the noni versions use 0-1
BLUE  <= Color(iBlue:255) # red and green default to zero


# @ means beginning of an anonymous function


type Point [number, number]
type Size  [number, number]
type Vector extends Point

type MyRect extends Rect {
    color:0
    phase:0
    frequency:1
}

# to make a new MyRect do

my_cool_rect = MyRect(x:5, y:5, w:100, h:100, color:0, phase:0, frequency:1)

to make 100 cool rects do
range(100) => map @MyRect(w:randf(0,100), h:randf(0,100) color:randi(5), frequency:randf())

@MyRect is a lambda invoked by map over the list passed to it from range(100)

setup rects by recursing on a single one


############## Fading split rectangeles ####################

# flatten will recursively flatten a nested list into a one dimensional array
do_splits <= @(rect,depth) {
    if depth < 0 return [rect]
    let dir = choose(DIRECTIONS)
    let [left, right] = rect.split(dir,randf(0.2,0.8))
    return flatten(do_splits(left,depth-1, do_splits(right,depth-1)))
}

drawRect <= @(rect, screen, time) {
    theta = remap(sine(time / 100 * (0.5+rect.frequency)) + rect.phase)
    t = remap(theta, -1, 1, 0, 1)
    if t < 0.5 (t = t/2) ? (t = l-t)
    sat <= lerp(t, 0.2, 0.8)
    lit <= lerp(t 0.2, 1.0)
    screen.fillRect(rect, HSL(hue:rect.hue,sat:sat,lit:lit))
    screen.strokeRect(rect, BLACK)
}

on system.setup do {
    rects <= do_splits(SCREEN,4)
}

on system.forever do {
    rects => each drawRect($,SCREEN SYSTEM.time)
}

# HSL converts arguments to a Color object, which fillRect will convert to RGB as needed



# ############### Mandlebrot Set Renderer ##################


calc_mandel_pixel(cx,cy) {
    i = 0
    zx = 0
    zy = 0
    do {
        let xt = zx * zy
        zx = zx * zx - zy * zy + cx
        zy = 2 * xt + cy
        i++
    } while (i < 255 and (zx * zx + zy * zy) < 4)
    return 255 - i
}

range(256)
    => map @|i|i/255
    => map @|t|HSL(lerp(t,0.2,0.9), lerp(t 0.8, 1), lerp(t, 0.5, 0.5)
    => RAINBOW

SCREEN.every @(x,y) => {
    let xx = remap(x,0,SCREEN.width, -0.35, -0.15)
    let yy = remap(x,0,SCREEN.height, -0.8, -0.6)
    SCREEN.setPixel(x,y, RAINBOW[calc_mandle_pixel(xx,yy)]
}

# ############## Snowflakes falling ####################

FLAKE_COUNT = 50
fun MakeFlake(i) {
    let flake = Object()
    flake.pos = Point(randi(0,SCREEN.width), randi(0,SCREEN.hc)
    flake.v  = Vector(randf(-0.1,0.1), randf(0.5,1.5))
    flake.alive = true
}

on system setup do {
    FLAKES <= range(FLAKE_COUNT) => map @MakeFlake()
    grid <= MakeGrid(SCREEN.size)
    reset_snow()
}
EMPTY = 0
BARRIER = 2
SNOW = 1
fun reset_snow() {
    FLAKES.every @(|flake|){flake.alive <= true}
    grid.fill(EMPTY)
    let left = randi(0,SCREEN.wc)
    let right = randi(SCREEN.wc,SCREEN.right)
    let top = randi(SCREEN.hc, SCREEN.bottom - 2)
    range(left,right).every @|i| grid.set(i,top,BARRIER)
    range(SCREEN.left,SCREEN.right).every @|i| grid.set(i,SCREEN.bottom-2, BARRIER)
}

on system forever do {
    let live_count <= 0
    flakes.every @|flake| {
        if not flake.alive return
        live_count++
        flake.x = wrap(flake.pos.x + flake.v.x, SCREEN.left, SCREEN.right)
        let ix = round(flake.pos.x)
        let iy = round(flake.pos.y)
        let ty = round(flake.pos.y + flake.v.y)

        # if at bottom
        if ty > SCREEN.bottom -1 {
            grid.set(ix,iy, SNOW)
            flake.y = 0
            flake.x = randi(SCREEN.left, SCREEN.right)
            return
        }

        # if hit something
        if grid.get(ix,iy) > 0 {
            # if at the top then kill the flake
            if iy == 0 {
                flake.alive = false
                return
            }
            # else mark solid snow and recycle the flake
            grid.set(ix,iy,SNOW)
            flake.y = 0
            flake.x = randi(SCREEN.left, SCREEN.right)
            return
        }

        # if none of those things happened then just wrap it
        flake.y = wrap(flake.y + flake.v.y, SCREEN.top, SCREEN.bottom)
    }
}


## #################### drips ####################

on system.setup do {
    palette = [black, red,green,blue,cyan,yellow,purple,white]
    fun MakeDot() {
        dot = Object()
        dot.xy = Point(randi(0,screen.width), randi(0,1))
        dot.v =  Vector(randf(-0.1,0.1), randf(0.5,1.5))
        dot.color = chooseIndex(palette)
    }
    dots = range(20) => map @MakeDot()


    bitmap = MakeBitmap(screen.width, screen.height, palette.length)
    bitmap.fill(0)
}

mode drips do {
    every dot in dots do {
        dot.xy = wrap(dot.xy + dot.v, [0,0], [screen.width, screen.height])
        bitmap.setPixel(dot,dot.color)
        bitmap setPixel dot dot.color
    }
    wait 0.1
}


## ################## sprites #######################

# assume images have only the required sprites in them
sprites = RingBuffer([
    {
        name:'running_mario'
        tilesize: [16,16],
    },
    {
        name:"swimmng_mario",
        tilesize:[16,16],
    }
])

fun load_sprite(info) {
    info.image = wait system.loadImage(info.url)
    info.frames = RingBuffer(range(floor(info.image.width/16)))
}

on system.setup do {
    wait sprites.every load_image
    print("all sprites loaded. Engage!")
}


on system.forever do {
    let sprite = sprites.current()
    SCREEN.fill(BLACK)
    drawFrame(sprite, sprite.frames.current(), [0,0])
    sprite.frames.next()

    if floor(time) mod 20 == 0 {
        sprites.next()
        sprite.current().frames.reset()
    }
}
