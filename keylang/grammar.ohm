keylang {
    under = "_"
    q = "\'"
    qq = "\""

    number  (a number)
        = "-"? digit+ "." digit+ --float
        | "-"? digit+ --int

    string (a plain string with single or double quotes)
      = q (~q any)*  q
      | qq(~qq any)* qq

    boolean = "true" | "false"

    Literal = number | string | boolean

    ident = letter (letter | digit | under)* dot_part?
    dot_part = "." ident

    comment = space* "//" toEOL
    toEOL = (~"\n" any)* "\n"

    binop = "+" | "-" | "*" | "/" | "<" | ">" | "=="
    BinExp = Exp binop Exp
    ParenExp = "(" Exp ")"
    Assignment = ident "=" Exp
    VarDec = "var" ident

    Deref = Exp "." ident
    FunctionCall = Exp "(" ListOf<Exp,","> ")"
    FunctionDef  = "fun" ident "(" ListOf<ident,","> ")" Block
    CondExp = "if" + ParenExp Block ("else" Block)?

    Lambda = "(" ListOf<ident,","> ")" "=>" Block
    Return = "return" Exp
    Directive = "@" ident "(" ListOf<Exp,","> ")"

    Block = "{" Exp* "}"

    Exp = Directive | Return | FunctionDef | Lambda | VarDec | Assignment | CondExp | Deref | FunctionCall | ParenExp | BinExp | Literal | ident | Block | comment
}
