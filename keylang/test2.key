{

  // flatten will recursively flatten a nested list into a one dimensional array
let DIRECTIONS = List("h","v")
let rects = 0
fun do_splits(rect,depth) {
    if (depth < 0) {
        return List(rect)
    }
    let dir = choose(DIRECTIONS)
    let parts = rect.split(dir,randf(0.2,0.8))
    return List(do_splits(parts.get(0),depth-1), do_splits(parts.get(1),depth-1))
}

let BLACK = Color(0,0,0)
fun drawRect(rect, time) {
//    let theta = Math.sin(time / 100 * (0.5 + rect.frequency) + rect.phase)
    let theta = Math.sin(time/100 * (0.5 + rect.frequency) + rect.phase)
    let t = remap(theta, -1, 1, 0, 1)
    if (t < 0.5) {
        t = t/2
    } else {
        t = 1-t
    }
    let sat = lerp(t, 0.2, 0.8)
    let lit = lerp(t, 0.2, 1.0)
    screen.fillRect(rect, HSL(rect.hue,sat,lit))
    screen.strokeRect(rect, BLACK)
}

fun setup() {
    let outp = do_splits(screen,4)
    console.log("output",outp)
    let flat = outp.flatten()
    console.log("flat",flat)
    rects = flat
    rects.every((r)=>{
    r.hue = randf(0,1)
    r.phase = randf(0,1)
        r.frequency = randf(0.2,1.5)
    })
}

fun loop() {
    rects.every((rect) => { drawRect(rect,system.time) })
}

}
