@board("matrix")

var FLAKE_COUNT = 3
var snow
var sorigin = [0,0]
var grid   = MDArray([64,32])

var EMPTY = 0
var SNOW = 1
var PLATFORM = 2

fun MakeFlake() {
    var flake = Obj()
    flake.x = randi(0,screen.width)
    flake.y = randi(0,screen.height/2)
    flake.vx = randf(-0.1,0.1)
    flake.vy = randf(0.1,0.8)
    flake.alive = true
    return flake
}

fun reset_snow() {
    snow.every((flake) => { flake.alive = true })
    grid.fill(EMPTY)
    //platform
    var left = randi(0,screen.width/2)
    var right = randi(screen.width/2, screen.width)
    var top = randi(screen.height/2, screen.height-2)
    listrange(left,right).every((i)=> { grid.set2(i,top,PLATFORM) })
    //bottom
    listrange(0,screen.width).every((i)=>{
        grid.set2(i,screen.height-1,PLATFORM)
    })
    print("running with flake count", FLAKE_COUNT)
}

@type("start",setupit)
fun setupit() {
    snow = listrange(FLAKE_COUNT).map((x) => { return MakeFlake() })
    reset_snow()
}

var live_count = 0

fun reset_flake(ix,iy,flake) {
    grid.set2(ix,iy,SNOW)
    flake.y = 0
    flake.x = randi(0,screen.width)
}
@type("loop",draw)
fun draw() {
    print("in the loop")
    screen.fill(BLACK)
    //move the flakes
    snow.every((flake) => {
        print("drawing flake",flake)
        if not flake.alive return 0
        live_count = live_count + 1
        flake.x = wrap(flake.x + flake.vx, 0, screen.width)
        var ix = floor(flake.x)
        var iy = floor(flake.y)
        var ty = floor(flake.y+flake.vy)
        // if at bottom reset
        if ty >= screen.height -1     return reset_flake(ix,iy,flake)
        // if hit something reset
        if grid.get2(ix,ty) > EMPTY   return reset_flake(ix,iy, flake)
        flake.y = wrap(flake.y+flake.vy)
    })
    live_count = 0

    //draw the flakes
    snow.every((flake) => {
        if flake.alive screen.setPixel([flake.x,flake.y],WHITE)
    })
    //draw the background grid
    grid.every((v,x,y) => {
        if v == SNOW      screen.setPixel([x,y],GRAY)
        if v == PLATFORM  screen.setPixel([x,y],RED)
    })

}
